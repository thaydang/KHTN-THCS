"""Lesson plan generator for Natural Sciences (KHTN) lesson plans.

This module provides a command line application that can build lesson plan
markdown files either from a JSON configuration or via an interactive prompt.
The output markdown is ready for use as lesson plans or e-learning slide
outlines, and it supports LaTeX syntax inside sections (e.g. $F = ma$).
"""

from __future__ import annotations

import argparse
import json
from dataclasses import dataclass, field
from pathlib import Path
from textwrap import dedent
from typing import Any, Dict, List, Optional


@dataclass
class Activity:
    """Represents a teaching activity within the lesson."""

    phase: str
    description: str
    time_allocation: Optional[str] = None
    notes: Optional[str] = None

    def to_markdown(self) -> str:
        bullet = f"- **{self.phase}**: {self.description.strip()}"
        details: List[str] = []
        if self.time_allocation:
            details.append(f"‚åõ {self.time_allocation}")
        if self.notes:
            details.append(f"üìù {self.notes.strip()}")
        if details:
            bullet += f" ({'; '.join(details)})"
        return bullet


@dataclass
class LessonPlan:
    """Internal representation of a Natural Sciences lesson plan."""

    title: str
    grade_level: str
    topic: str
    duration: str
    author: Optional[str] = None
    objectives: List[str] = field(default_factory=list)
    materials: List[str] = field(default_factory=list)
    activities: List[Activity] = field(default_factory=list)
    assessments: List[str] = field(default_factory=list)
    homework: Optional[str] = None
    references: List[str] = field(default_factory=list)
    notes: Optional[str] = None

    def to_markdown(self) -> str:
        """Render the lesson plan as a Markdown document."""

        sections: List[str] = [f"# {self.title}"]
        header_lines = [
            f"- **Kh·ªëi l·ªõp:** {self.grade_level}",
            f"- **Ch·ªß ƒë·ªÅ:** {self.topic}",
            f"- **Th·ªùi l∆∞·ª£ng:** {self.duration}",
        ]
        if self.author:
            header_lines.append(f"- **Ng∆∞·ªùi bi√™n so·∫°n:** {self.author}")
        sections.append("\n".join(header_lines))

        if self.objectives:
            sections.append("## M·ª•c ti√™u h·ªçc t·∫≠p\n" + _to_bullet_list(self.objectives))

        if self.materials:
            sections.append("## Thi·∫øt b·ªã v√† h·ªçc li·ªáu\n" + _to_bullet_list(self.materials))

        if self.activities:
            activity_lines = "\n".join(activity.to_markdown() for activity in self.activities)
            sections.append("## Ho·∫°t ƒë·ªông d·∫°y h·ªçc\n" + activity_lines)

        if self.assessments:
            sections.append("## ƒê√°nh gi√°\n" + _to_bullet_list(self.assessments))

        if self.homework:
            sections.append("## B√†i t·∫≠p v·ªÅ nh√†\n" + self.homework.strip())

        if self.references:
            sections.append("## T∆∞ li·ªáu tham kh·∫£o\n" + _to_bullet_list(self.references))

        if self.notes:
            sections.append("## Ghi ch√∫\n" + self.notes.strip())

        return "\n\n".join(sections) + "\n"


def _to_bullet_list(items: List[str]) -> str:
    """Render a list of strings as Markdown bullet points."""

    return "\n".join(f"- {item.strip()}" for item in items)


def load_plan_from_json(path: Path) -> LessonPlan:
    """Load the lesson plan configuration from a JSON file."""

    with path.open(encoding="utf-8") as fp:
        data = json.load(fp)
    return lesson_plan_from_dict(data)


def lesson_plan_from_dict(data: Dict[str, Any]) -> LessonPlan:
    """Create a :class:`LessonPlan` from a dictionary."""

    activities = [
        Activity(
            phase=activity["phase"],
            description=activity["description"],
            time_allocation=activity.get("time_allocation"),
            notes=activity.get("notes"),
        )
        for activity in data.get("activities", [])
    ]

    plan = LessonPlan(
        title=data["title"],
        grade_level=data["grade_level"],
        topic=data["topic"],
        duration=data["duration"],
        author=data.get("author"),
        objectives=data.get("objectives", []),
        materials=data.get("materials", []),
        activities=activities,
        assessments=data.get("assessments", []),
        homework=data.get("homework"),
        references=data.get("references", []),
        notes=data.get("notes"),
    )
    return plan


def interactive_builder() -> LessonPlan:
    """Interactively gather lesson plan information from the user."""

    print("Nh·∫≠p th√¥ng tin k·∫ø ho·∫°ch b√†i d·∫°y KHTN. ƒê·ªÉ tr·ªëng v√† nh·∫•n Enter n·∫øu kh√¥ng √°p d·ª•ng.")
    title = _prompt_required("Ti√™u ƒë·ªÅ b√†i d·∫°y")
    grade_level = _prompt_required("Kh·ªëi l·ªõp")
    topic = _prompt_required("Ch·ªß ƒë·ªÅ/Ch∆∞∆°ng")
    duration = _prompt_required("Th·ªùi l∆∞·ª£ng (v√≠ d·ª•: 45 ph√∫t)")
    author = input("Ng∆∞·ªùi bi√™n so·∫°n: ").strip() or None

    objectives = _prompt_list("M·ª•c ti√™u h·ªçc t·∫≠p (nh·∫≠p t·ª´ng m·ª•c ti√™u, Enter tr·ªëng ƒë·ªÉ k·∫øt th√∫c)")
    materials = _prompt_list("Thi·∫øt b·ªã/h·ªçc li·ªáu")

    activities: List[Activity] = []
    print("\nNh·∫≠p c√°c ho·∫°t ƒë·ªông d·∫°y h·ªçc (ƒë·ªÉ tr·ªëng t√™n pha ƒë·ªÉ k·∫øt th√∫c).")
    while True:
        phase = input("Pha ho·∫°t ƒë·ªông (VD: Kh·ªüi ƒë·ªông, H√¨nh th√†nh ki·∫øn th·ª©c...): ").strip()
        if not phase:
            break
        description = _prompt_required("M√¥ t·∫£ ho·∫°t ƒë·ªông")
        time_allocation = input("Th·ªùi l∆∞·ª£ng d·ª± ki·∫øn: ").strip() or None
        notes = input("Ghi ch√∫ (c√≥ th·ªÉ ch·ª©a LaTeX): ").strip() or None
        activities.append(
            Activity(
                phase=phase,
                description=description,
                time_allocation=time_allocation,
                notes=notes,
            )
        )

    assessments = _prompt_list("H√¨nh th·ª©c ƒë√°nh gi√°")
    homework_input = input("B√†i t·∫≠p v·ªÅ nh√† (c√≥ th·ªÉ ch·ª©a LaTeX): ").strip()
    homework = homework_input or None
    references = _prompt_list("T√†i li·ªáu tham kh·∫£o")
    notes_input = input("Ghi ch√∫ chung: ").strip()
    notes = notes_input or None

    return LessonPlan(
        title=title,
        grade_level=grade_level,
        topic=topic,
        duration=duration,
        author=author,
        objectives=objectives,
        materials=materials,
        activities=activities,
        assessments=assessments,
        homework=homework,
        references=references,
        notes=notes,
    )


def _prompt_required(label: str) -> str:
    while True:
        value = input(f"{label}: ").strip()
        if value:
            return value
        print("Gi√° tr·ªã n√†y l√† b·∫Øt bu·ªôc, vui l√≤ng nh·∫≠p l·∫°i.")


def _prompt_list(label: str) -> List[str]:
    print(label)
    items: List[str] = []
    while True:
        value = input("- ").strip()
        if not value:
            break
        items.append(value)
    return items


def build_argument_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        description="T·∫°o k·∫ø ho·∫°ch b√†i d·∫°y Khoa h·ªçc T·ª± nhi√™n v√† xu·∫•t Markdown.",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=dedent(
            """\
            V√≠ d·ª• s·ª≠ d·ª•ng:
              python lesson_plan_generator.py --from-json vi_du.json output.md
              python lesson_plan_generator.py --interactive ke_hoach.md
            """
        ),
    )
    parser.add_argument(
        "output",
        type=Path,
        help="ƒê∆∞·ªùng d·∫´n file Markdown ƒë·∫ßu ra.",
    )
    source_group = parser.add_mutually_exclusive_group()
    source_group.add_argument(
        "--from-json",
        type=Path,
        help="ƒê∆∞·ªùng d·∫´n t·ªõi file JSON m√¥ t·∫£ k·∫ø ho·∫°ch b√†i d·∫°y.",
    )
    source_group.add_argument(
        "--interactive",
        action="store_true",
        help="K√≠ch ho·∫°t ch·∫ø ƒë·ªô nh·∫≠p li·ªáu t·ª´ng b∆∞·ªõc trong terminal.",
    )
    return parser


def main(argv: Optional[List[str]] = None) -> int:
    parser = build_argument_parser()
    args = parser.parse_args(argv)

    if args.from_json:
        plan = load_plan_from_json(args.from_json)
    else:
        plan = interactive_builder()

    markdown = plan.to_markdown()
    args.output.write_text(markdown, encoding="utf-8")
    print(f"ƒê√£ ghi k·∫ø ho·∫°ch b√†i d·∫°y v√†o {args.output}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
